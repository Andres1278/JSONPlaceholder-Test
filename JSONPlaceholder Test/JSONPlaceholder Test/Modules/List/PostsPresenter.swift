//
//  PostsPresenter.swift
//  JSONPlaceholder Test
//
//  Created by Pedro Andres Villamil on 26/08/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import RealmSwift

final class PostsPresenter {

    // MARK: - Private properties -
    private unowned let view: PostsViewInterface
    private let interactor: PostsInteractorInterface
    private let wireframe: PostsWireframeInterface
    private var currentID: Int?
    private var isSearching: Bool = false
    private var isLoadingPage: Bool = false
    private var page: Int?
    private var shouldLoadNextPage: Bool {
        !isLoadingPage && !emptyRequest
    }
    var emptyRequest: Bool = false
    var postList: List<Post>!
    
    // MARK: - Lifecycle -
    init(view: PostsViewInterface, interactor: PostsInteractorInterface, wireframe: PostsWireframeInterface) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
    
    // MARK: - Private functions -
    private func getPostList(id: Int) {
        interactor.getPosts(id: id) { [weak self] result in
            guard let strongSelf = self else { return }
            switch result {
            case .success(let results):
                strongSelf.isLoadingPage = false
                strongSelf.currentID = id
                strongSelf.emptyRequest = results.isEmpty
                results.forEach { post in
                    post.isFavorite = false
                }
                strongSelf.interactor.save(results)
            case .failure(let error):
                strongSelf.wireframe.showAlert(witn: error.localizedDescription)
            }
        }
    }
}

// MARK: - Extensions -
extension PostsPresenter: PostsPresenterInterface {
    
    var postNumber: Int {
        postList.count
    }
    
    var numberOfItems: Int {
        return  postList.isEmpty ? 6 : postList.count
    }
    
    func loadNextPage() {
        guard let currentID = currentID,
              shouldLoadNextPage else {
            return
        }
        isLoadingPage = true
        getPostList(id: currentID + 1)
    }
    
    func didSelectItem(at indexPath: IndexPath) {
        guard let post = postList.safeContains(indexPath.row) else { return }
        wireframe.navigateToDetail(post: post)
    }
    
    func item(at indexPath: IndexPath) -> PostCellViewModel? {
        guard let post = postList.safeContains(indexPath.row) else {
            return nil
        }
        return PostCellViewModel(title: post.title)
    }
    
    func deleteIteam(at indexPath: IndexPath) {
        guard let post = postList.safeContains(indexPath.row) else { return }
        interactor.deletePost(with: post.id)
    }
    
    func toggleFavoriteInPost(at indexPath: IndexPath) {
        guard let post = postList.safeContains(indexPath.row) else { return }
        post.toggleFavorite()
    }
    
    func deleteAllList() {
        interactor.deleteAllList()
    }
    
    func refreshList() {
        let realm = try! Realm()
        Sesion.defaultUser(in: realm)
        postList = Sesion.defaultUser(in: realm).postList
        getPostList(id: 1)
    }

    func viewDidLoad() {
        let realm = try! Realm()
        Sesion.defaultUser(in: realm)
        postList = Sesion.defaultUser(in: realm).postList
        if postList.isEmpty {
            getPostList(id: 1)
        } else {
            currentID = postList.first?.userId ?? 1
        }
    }
    
    func showShareAction(_ controller: UIActivityViewController, animated: Bool) {
        wireframe.showShareAction(controller, animated: animated)
    }
}

extension Collection {
    
    func safeContains(_ index: Index) -> Element? {
        return indices.contains(index) ? self[index] : nil
    }
}
