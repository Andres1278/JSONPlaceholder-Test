//
//  PostsViewController.swift
//  JSONPlaceholder Test
//
//  Created by Pedro Andres Villamil on 26/08/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import RealmSwift

final class PostsViewController: UIViewController {
    
    // MARK: - Private Properties -
    private lazy var tableView: UITableView = {
        let tableView = UITableView(frame: CGRect.zero, style: .plain)
        tableView.translatesAutoresizingMaskIntoConstraints = false
        tableView.separatorStyle = .singleLine
        tableView.delegate = self
        tableView.dataSource = self
        tableView.register(
            PostTableViewCell.self,
            forCellReuseIdentifier: PostTableViewCell.reuseIdentifier
        )
        return tableView
    }()
    
    private lazy var deleteButton: UIBarButtonItem = {
        let deleteButton = UIBarButtonItem(
            image: UIImage(systemName: "trash"),
            style: .plain,
            target: self,
            action: #selector(trashTapped)
        )
        deleteButton.tintColor = .red
        return deleteButton
    }()
    
    private lazy var refreshButton: UIBarButtonItem = {
        let refreshButton = UIBarButtonItem(barButtonSystemItem: .refresh, target: self, action: #selector(refreshTapped))
        refreshButton.tintColor = .systemGreen
        return refreshButton
    }()
    
    private var listToken: NotificationToken?
    fileprivate var postList: List<Post>!
    
    // MARK: - Public properties -
    var presenter: PostsPresenterInterface!

    // MARK: - Lifecycle -
    override func loadView() {
        super.loadView()
        addViews()
        setUpConstraint()
        
    }

    override func viewDidLoad() {
        super.viewDidLoad()
        presenter.viewDidLoad()
        setNavigationBar()
        
        let realm = try! Realm()
        listToken = realm.observe{ notification, realm in
            self.tableView.reloadData()
        }
    }
    
    deinit {
        listToken?.invalidate()
    }
    
    // MARK: - Actions -
    @objc func trashTapped() {
        presenter.deleteAllList()
    }
    
    @objc func refreshTapped() {
        presenter.refreshList()
    }
    
    // MARK: - Private methods -
    private func addViews() {
        view.addSubview(tableView)
    }
    
    private func setUpConstraint() {
        NSLayoutConstraint.activate([
            tableView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor)
        ])
    }
    
    private func setNavigationBar() {
        let navBarAppearance = UINavigationBarAppearance()
        navBarAppearance.configureWithOpaqueBackground()
        navigationController?.navigationBar.scrollEdgeAppearance = navBarAppearance
        navigationController?.navigationBar.backgroundColor = .systemGray6
        navigationController?.navigationBar.tintColor = .darkGray
        navigationController?.navigationBar.isTranslucent = true
        navigationController?.navigationBar.topItem?.title = "List"
        navigationItem.rightBarButtonItem = deleteButton
        navigationItem.leftBarButtonItem = refreshButton
    }
    
    private func swipeShareAction(_ post: Post, indexPath: IndexPath) {
        
        let postTitle = "Check this post!  " + post.title.capitalized
        let postBody = "\n\(post.body)"
        let uploadSignature = "\nAtt: Pedro Villamil"
        var uploadItems: [AnyObject]?
        uploadItems = [postTitle as AnyObject, postBody as AnyObject, uploadSignature as AnyObject]
        
        let activityController = UIActivityViewController(activityItems: uploadItems!, applicationActivities: nil)
        if let popoverController = activityController.popoverPresentationController {
            if let cell = tableView.cellForRow(at: indexPath) {
                popoverController.sourceView = cell
                popoverController.sourceRect = cell.bounds
            }
        }
        presenter.showShareAction(activityController, animated: true)
    }
}

// MARK: - TableView Delegate Extension -
extension PostsViewController: UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return presenter.postNumber > 0 ? UITableView.automaticDimension : 60
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        presenter.didSelectItem(at: indexPath)
        tableView.deselectRow(at: indexPath, animated: true)
    }
    
    func tableView(_ tableView: UITableView, editingStyleForRowAt indexPath: IndexPath) -> UITableViewCell.EditingStyle {
        .delete
    }
    
    func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) {
        if editingStyle == .delete {
            self.tableView.beginUpdates()
            self.presenter.deleteIteam(at: indexPath)
            self.tableView.deleteRows(at: [indexPath], with: .fade)
            self.tableView.endUpdates()
        }
    }
    
    func tableView(_ tableView: UITableView, leadingSwipeActionsConfigurationForRowAt indexPath: IndexPath) -> UISwipeActionsConfiguration? {
        
        let realm = try! Realm()
        let post = Sesion.defaultUser(in: realm).postList[indexPath.row]
        let shareAction = UIContextualAction(style: .normal, title: "") { [weak self]
            (action, sourceView, completionHandler) in
            guard let strongSelf = self else { return }
            strongSelf.swipeShareAction(post, indexPath: indexPath)
            completionHandler(true)
        }
        shareAction.image = UIImage(systemName: "square.and.arrow.up.on.square")
        shareAction.backgroundColor = .systemGreen
        
        let favAction = UIContextualAction(style: .normal, title: "") { [weak self] (action, sourceView, completionHandler) in
            guard let strongSelf = self else { return }
            strongSelf.tableView.beginUpdates()
            strongSelf.presenter.toggleFavoriteInPost(at: indexPath)
            strongSelf.tableView.endUpdates()
            completionHandler(true)
        }
        
        favAction.image = UIImage(systemName: post.isFavorite ?? false ? "star.fill" : "star")
        favAction.backgroundColor = .systemYellow
        let swipeConfiguration = UISwipeActionsConfiguration(actions: [favAction, shareAction])
        swipeConfiguration.performsFirstActionWithFullSwipe = false
        return swipeConfiguration
    }
}

// MARK: - TableView DataSource Extension -
extension PostsViewController: UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return presenter.numberOfItems
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(
            withIdentifier: PostTableViewCell.reuseIdentifier,
            for: indexPath
        ) as? PostTableViewCell else {
            return UITableViewCell()
        }
        if indexPath.row == presenter.postNumber - 1 {
            presenter.loadNextPage()
        }
        let model = presenter.item(at: indexPath)
        cell.setData(model)
        cell.accessoryType = .disclosureIndicator
        return cell
    }
    
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
       let lastRowIndex = tableView.numberOfRows(inSection: 0) - 1
       if indexPath.row == lastRowIndex {
           let spinner = UIActivityIndicatorView(style: .medium)
           spinner.startAnimating()
           spinner.frame = CGRect(
            x: CGFloat(0),
            y: CGFloat(0),
            width: tableView.bounds.width,
            height: CGFloat(90)
           )
           self.tableView.tableFooterView = !presenter.emptyRequest ? spinner : UIView()
           self.tableView.tableFooterView?.isHidden = presenter.emptyRequest
       }
   }
}

// MARK: - PostsViewInterface Extension -
extension PostsViewController: PostsViewInterface {
    
    func reloadView() {
        tableView.reloadData()
    }
}

// MARK: - PostsViewController getters -
extension PostsViewController {
    
    func getTableView() -> UITableView {
        return tableView
    }
}
