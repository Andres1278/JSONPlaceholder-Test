//
//  PostDetailViewController.swift
//  JSONPlaceholder Test
//
//  Created by Pedro Andres Villamil on 27/08/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit
import RealmSwift

final class PostDetailViewController: UIViewController {

    // MARK: - Public properties -
    var presenter: PostDetailPresenterInterface!
    private var postToken: NotificationToken?
    fileprivate var post: Post?
    
    // MARK: - Private properties -
    private lazy var tableView: UITableView = {
        let tableView = UITableView(frame: CGRect.zero, style: .insetGrouped)
        tableView.translatesAutoresizingMaskIntoConstraints = false
        tableView.separatorStyle = .singleLine
        tableView.delegate = self
        tableView.dataSource = self
        tableView.register(
            UINib(nibName: "CommentTableViewCell", bundle: nil),
            forCellReuseIdentifier: CommentTableViewCell.reuseIdentifier
        )
        tableView.register(
            UINib(nibName: "UserInfoTableViewCell", bundle: nil),
            forCellReuseIdentifier: UserInfoTableViewCell.reuseIdentifier
        )
        tableView.register(
            UINib(nibName: "PostInfoTableViewCell", bundle: nil),
            forCellReuseIdentifier: PostInfoTableViewCell.reuseIdentifier
        )
        tableView.register(
            DetailPostHeader.self,
            forHeaderFooterViewReuseIdentifier: DetailPostHeader.reuseIdentifier
        )
        return tableView
    }()
    
    private lazy var favoriteButton: UIBarButtonItem = {
        let favButton = UIBarButtonItem(
            image: UIImage(systemName: presenter.isFavorite ? "star.fill" : "star"),
            style: .plain,
            target: self,
            action: #selector(favTapped)
        )
        favButton.tintColor = .systemYellow
        return favButton
    }()
    

    // MARK: - Lifecycle -
    override func viewDidLoad() {
        super.viewDidLoad()
        presenter.viewDidLoad()
        addViews()
        setUpConstraint()
        let realm = try! Realm()
        post = realm.object(ofType: Post.self, forPrimaryKey: presenter.postId)
        postToken = realm.observe { [weak self] notification, realm in
            guard let strongSelf = self,
                  let isFavorite = strongSelf.post?.isFavorite else {
                return
            }
            strongSelf.favoriteButton.isSelected = isFavorite
//            strongSelf.favoriteButton.image = UIImage(systemName: favoriteState ? "star.fill" : "star")
        }
        setUpView()
    }
    deinit {
        postToken?.invalidate()
    }
    
    // MARK: - Actions -
    @objc func favTapped() {
        presenter.toggleFavoriteState()
    }
    
    // MARK: - Private methods -
    private func setUpView() {
        navigationItem.rightBarButtonItem = favoriteButton
        guard let favoriteState = post?.isFavorite else { return }
        favoriteButton.isSelected = favoriteState
    }
    
    private func addViews() {
        view.addSubview(tableView)
    }
    
    private func setUpConstraint() {
        NSLayoutConstraint.activate([
            tableView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])
    }
}

// MARK: - Extensions -
extension PostDetailViewController: PostDetailViewInterface {
    func reloadView() {
        tableView.reloadData()
    }
}


// MARK: - UITableViewDelegate -
extension PostDetailViewController: UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        switch presenter.item(at: indexPath) {
        case .postInfo: return UITableView.automaticDimension
        case .userInfo: return 136
        case .comments: return 120
        default: return UITableView.automaticDimension
        }
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 60
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        guard let header = tableView.dequeueReusableHeaderFooterView(
            withIdentifier: DetailPostHeader.reuseIdentifier
        ) as? DetailPostHeader,
            let headerTitle = presenter.getSectionHeader(in: section) else {
            return nil
        }
        header.configure(with: headerTitle)
        return header
    }
}

// MARK: - UITableViewDataSource -
extension PostDetailViewController: UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return presenter.numberOfItems(in: section)
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return presenter.numberOfSections
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        switch presenter.item(at: indexPath) {
        case .postInfo(let post):
            guard let cell = tableView.dequeueReusableCell(
                withIdentifier: PostInfoTableViewCell.reuseIdentifier,
                for: indexPath
            ) as? PostInfoTableViewCell else {
                return UITableViewCell()
            }
            cell.configure(with: post)
            return cell
        case .userInfo(let user):
            guard let cell = tableView.dequeueReusableCell(
                withIdentifier: UserInfoTableViewCell.reuseIdentifier,
                for: indexPath
            ) as? UserInfoTableViewCell else {
                return UITableViewCell()
            }
            cell.configure(with: user)
            return cell
        case .comments(let comment):
            guard let cell = tableView.dequeueReusableCell(
                withIdentifier: CommentTableViewCell.reuseIdentifier,
                for: indexPath
            ) as? CommentTableViewCell else {
                return UITableViewCell()
            }
            cell.configure(with: comment)
            return cell
        case .none:
            return UITableViewCell()
        }
    }
}

// MARK: - PostDetailViewController getters -
extension PostDetailViewController {
    
    func getTableView() -> UITableView {
        return tableView
    }
}
